#summary Using soitoolkit-nms to access Apache ActiveMQ from Microsoft .Net
#sidebar UG_SideBar

=Using Apache ActiveMQ from Microsoft .Net=

*Content*
<wiki:toc max_depth="3" />

= Introduction =

*`soitoolkit-nms`* provides a very simple api for accessing [http://activemq.apache.org Apache ActiveMQ] from an Microsoft .Net environment. 

It is based on [http://activemq.apache.org/nms/ Apache NMS] but provides a easier to use api focused on supporting the following exchange patterns:

|| *Icon* || *Pattern* ||
|| http://soi-toolkit.googlecode.com/svn/wiki/NMS/ep_store_forward.png || *Store & Forward* (a.k.a One-way or Fire & Forget) ||
|| http://soi-toolkit.googlecode.com/svn/wiki/NMS/ep_asynch_request_response.png || *Asynchronous Request/Response* ||
|| http://soi-toolkit.googlecode.com/svn/wiki/NMS/ep_publish_subscribe.png || *Publish/Subscribe* ||

Soitoolkit-nms also provides:
 * *Logger*: A lightweight log-mechanism that can be configured to log to either the console, file or to Windows Event Log.
 * *Security*: Instructions on how to setup secure communication with ActiveMQ using SSL with mutual authentication.

= Exchange Patterns =

This section gives a quick introduction to the programming model for each exchange pattern with source code examples.

For each pattern a references is given to a fully working code example, typically a unit test.

For more details of the api look into the [#The_API api-section] below.

== Store & Forward ==

To send a message to a queue you write code like:

<code language="cs">
// Create a session to the message broker
using (ISession s = SessionFactory.CreateSession(BROKER_URL))
{
    // Create a sender and send some test messages to a test queue
    using (IQueueSender qs = s.CreateQueueSender(QUEUE_NAME))
    {
        qs.SendMessage(msg);
    }
}</code>

To receive messages from a queue you write code like:

<code language="cs">
// Create a session to the message broker
using (ISession s = SessionFactory.CreateSession(BROKER_URL))
{
    // List of received messages
    List<string> msgs = new List<string>();

    // Create a receiver for the test queue
    using (IQueueReceiver qr = s.CreateQueueReceiver(QUEUE_NAME))
    {
        ITextMessage msg = null;
        do
        {
            msg = qr.Receive(MAX_WAITTIME);
            if (msg != null) msgs.Add(msg.TextBody);
        }
            while (msg != null);
        }
    }
}</code>

For a fully working code example see [http://code.google.com/p/soi-toolkit/source/browse/soitoolkit-nms/trunk/soitoolkit-nms-tests/QueueTests.cs QueueTests.cs].

== Asynchronous Request/Response ==

== Publish/Subscribe ==

= Logging =

= Security =

= The API =
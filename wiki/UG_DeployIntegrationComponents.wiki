#summary Deploying an Integration Component.

*Content*
<wiki:toc max_depth="3" />

= Deploying an Integration Component =

*TBS*

 * jmx port
Add the following parameters to your Tomcat startup script:
{{{
  set CATALINA_OPTS=-Dcom.sun.management.jmxremote \
    -Dcom.sun.management.jmxremote.port=%my.jmx.port% \
    -Dcom.sun.management.jmxremote.ssl=false \
    -Dcom.sun.management.jmxremote.authenticate=false
}}}

Add to Tomcat Config console

{{{
-Dcom.sun.management.jmxremote
-Dcom.sun.management.jmxremote.port=9090
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false
}}}

 * PERMGEN SPACE
-XX:MaxPermSize option
SET JAVA_OPTS=-XX:PermSize=64M -XX:MaxPermSize=128M
Add following line into the catalina.sh file.

Quote:
JAVA_OPTS="-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms512m -Xmx1024m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC"

http://developers.sun.com/mobility/midp/articles/garbagecollection2/
http://blogs.sun.com/watt/entry/another_update_to_the_options
http://blogs.sun.com/watt/resource/jvm-options-list.html

 * Pictures (3)
 * app.home for log-file
 * heapsize in eclipse vid deploy
 * ig för tomcat (ppt kom igång)
  * add app.home var

 * form för ws

== Initial setup ==

=== Prepare an Integration Component for deploy using maven ===

Add the following to the pom-files for the web-projects

{{{
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>tomcat-maven-plugin</artifactId>
        <version>1.1</version>
        <configuration>
          <server>${serverId}</server>
          <url>http://${host}:${port}/manager</url>
          <path>/${artifactId}</path>
        </configuration>
      </plugin>
    </plugins>
  </build>
}}}

*Note:* For the teststub-war project use a path variable following the naming schema:
{{{
          <path>/${artifactId}-teststubs</path>
}}}

Add the following to your maven settings.xml file if admin/"" is not appropriate as usr/pwd:
{{{
    <server>
      <id>${serverId}</id>
      <username>myusername</username>
      <password>mypassword</password>
    </server>
}}}

For details of each parameters settings see: [http://mojo.codehaus.org/tomcat-maven-plugin/usage.html Usage of the Maven Tomcat plugin]

=== Setup a directory structure for the Integration Component on the server ===

Create the following directory structure under the app-home folder on the server:
 
{{{
${app.home}
   ${artifactId}
      config
}}}

The directory structure will be used to hold configuration files, log-files and other files used by the Integration Components, e.g. archive for data files processed by the component.

*Note:*  ${app.home} is an environment variable pointing to the app-home folder on the server and ${artifactId} is the artifact-id of your Integration Component.

== Setup configuration files ==

 # Copy and/or updates files from src/main/environment in the project to ${app.home}/${artifactId}/config on the server
 # Perform nessecary configuration, e.g.
  * change URL's in endpoints in the config-file
  * update username and passwords in the security-file
  * configure log4j to log to files in a appropriate way, using rolling log-files...

== Create deploy-files ==

Since we deploy to Tomcat the deploy-files are standard war-files. 
They are created with the command

{{{
cd .../trunk
mvn install 
}}}

If you have the Maven-plugin installed in Eclipse then you can execute the build command without leaving Eclipse.
Right-click the integration component top-level project and select "{{{Run As --> Maven install}}}"

PICTURE

The command creates war-files under the target folders of the war-projects...

== Deploy ==

For the war file to be deployed run the command:
{{{
mvn tomcat:deploy-only -Dupdate=true
}}}

For more information on available Tomcat commands see the [http://mojo.codehaus.org/tomcat-maven-plugin/plugin-info.html Plugin Documentation]


If you have the Maven-plugin installed in Eclipse then you can execute the deploy command without leaving Eclipse.
Right-click the integration component top-level project and select "{{{Run As --> Maven build...}}}"

PICTURE

Enter the build command:
{{{
tomcat:deploy-only -Dupdate=true
}}}

And a proper name (for easier reuse of the command):
{{{
sample1 deploy
}}}

PICTURE
#summary Deploying an Integration Component.

*Content*
<wiki:toc max_depth="3" />

= Deploying an Integration Component =

An integration component is easiest deployed using the mavens plugin for Tomcat.
Before you can deploy to Tomcat using the maven plugin you have to configure it in the web-projects pom.xml - files.

You also need to setup a directory structure on the server for holding configuration and log-files for the integration component.

== Initial setup ==

=== Prepare an Integration Component for deploy using maven plugin for Tomcat ===

Add the following to the pom-files for the web-projects

{{{
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>tomcat-maven-plugin</artifactId>
        <version>1.1</version>
        <configuration>
          <server>${serverId}</server>
          <url>http://${host}:${port}/manager</url>
          <path>/${artifactId}</path>
        </configuration>
      </plugin>
    </plugins>
  </build>
}}}

*Note:* For the teststub-war project use a path variable following the naming schema:
{{{
          <path>/${artifactId}-teststubs</path>
}}}

Add the following to your maven settings.xml file if admin/"" is not appropriate as usr/pwd:
{{{
    <server>
      <id>${serverId}</id>
      <username>myusername</username>
      <password>mypassword</password>
    </server>
}}}

For details of each parameters settings see: [http://mojo.codehaus.org/tomcat-maven-plugin/usage.html Usage of the Maven Tomcat plugin]

=== Setup a directory structure for the Integration Component on the server ===

Create the following directory structure under the app-home folder on the server:
 
{{{
${app.home}
   ${artifactId}
      config
}}}

The directory structure will be used to hold configuration files, log-files and other files used by the Integration Components, e.g. archive for data files processed by the component.

*Note:*  ${app.home} is an environment variable pointing to the app-home folder on the server and ${artifactId} is the artifact-id of your Integration Component.
The app.home variable should have been configured when installing the Tomcat server, see [InstallationGuide#Installing_Apache_Tomcat]

== Setup configuration files ==

 # Copy and/or updates files from src/main/environment in the project to ${app.home}/${artifactId}/config on the server
 # Perform nessecary configuration, e.g.
  * change URL's in endpoints in the config-file
  * update username and passwords in the security-file
  * configure log4j to log to files in a appropriate way, using rolling log-files instead of logging to the console...

== Create deploy-files ==

Since we deploy to Tomcat the deploy-files are standard war-files. 
They are created with the command

{{{
cd .../trunk
mvn install 
}}}

If you have the Maven-plugin installed in Eclipse then you can execute the build command without leaving Eclipse.
Right-click the integration component top-level project and select "{{{Run As --> Maven install}}}"

*PICTURE*

The command creates war-files under the target folders of the web-projects...

== Deploy ==

For the war file to be deployed to your Tomcat server run the command:
{{{
mvn tomcat:deploy-only
}}}

If the war already is installed you can reinstall it with the command:

{{{
mvn tomcat:deploy-only
}}}

For more information on available Tomcat commands see the [http://mojo.codehaus.org/tomcat-maven-plugin/plugin-info.html Plugin Documentation]


If you have the Maven-plugin installed in Eclipse then you can execute the deploy command without leaving Eclipse.
Right-click the integration component top-level project and select "{{{Run As --> Maven build...}}}"

PICTURE

Enter the build command:
{{{
tomcat:deploy-only -Dupdate=true
}}}

And a proper name (for easier reuse of the command):
{{{
sample1 deploy
}}}

PICTURE
#summary Installation Guide for users of soi-toolkit for runt time-products.

= Installation Guide of Run time products =

*Content*
<wiki:toc max_depth="2" />

= Introduction =

The installation guides below assumes your on a 32 bit Microsoft Windows PC.

The following versions (or newer) are recommended:
|| *Tool* || *Version* ||
||ActiveMQ||5.5.1||
||Tomcat||6.0.29||
||Derby||10.7.1.1||
||Cygwin||1.7.8||
||!FileZilla Server||0.9.37||

= Installation instructions =

==Installing Apache ActiveMQ==
If you want to be able to perform manuel tests on your PC where JMS is involved it could be a good idea to run these tests with a external JMS provider, i.e. not a JMS provider that is embedded in Mule (as it is when you run unit tests).

Follow these instructions to install ActiveMQ locally on your PC:

 * Download ActiveMQ from http://www.apache.org/dyn/closer.cgi?path=%2Factivemq%2Fapache-activemq%2F5.5.1%2Fapache-activemq-5.5.1-bin.zip

 * Unzip to some folder, e.g. {{{C:\opt}}}

 * Go to the folder {{{C:\opt\apache-activemq-5.5.1\bin\win32}}} and execute the file {{{InstallService.bat}}}.

 Active MQ is now registered as a windows service and can be started automatically when the PC is started. 
 
 NOTE: If you prefer to start ActiveMQ manually you can find start script (activemq.bat) in the bin-folder.

 Verify that ActiveMQ is running after the installation and start its windows service if not by:

 Open the url http://localhost:8161/admin/index.jsp in a web browser.

 A page like the following should now be displayed:
http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/ActiveMQVerifyInstallation.png


==Installing Apache Tomcat==
If you want to deploy to Tomcat locally in your PC for test purposes before deploying to test servers you can install Tomcat locally as follows:

 * Download Tomcat from http://tomcat.apache.org/download-60.cgi
  * Select the "32-bit/64-bit Windows Service Installer" (exe-file)

 * Execute the downloaded file and follow the wizard
  * Accept default values except for:
   * Page "Choose Components": Select the "Full" type of installation
   * Page "Configuration": Enter a User Name and Password for your Administration Login 
   (you will need this later on when you deploy Integration Components to Tomcat)
  * The wizard will wrap up by registering Tomcat as a Windows Service and starting the Tomcat service for you.

 * Verify Tomcat installation by open the URL http://localhost:8080/ in a web browser. A page should be displayed with the text "_If you're seeing this page via a web browser, it means you've setup Tomcat successfully. Congratulations!_”
 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/Install-Tomcat-1.png

 * Configure Tomcat.
  * Define an environment variable, {{{app.home}}}, for storing integration components config and log files (and whatever files that is not appropriate to package with the deploy files, e.g. the war-files)
  * Configure memory parameters for heap size and perm gen space
  * Declare a port for JMX access 

 The following configuration of the default installation is recommended if you plan to deploy a number of integration components to your Tomcat instance:
  * Start Tomcats configuration tool from {{{Windows Start menu --> Programs --> Apache Tomcat 6.0 --> Configure Tomcat}}}
  * Go to the tab named "Java" and add the following lines in the textarea names "Java Options":
  (adjust port number, memory levels and app.home folder according to your preferences)
{{{
-Dcom.sun.management.jmxremote
-Dcom.sun.management.jmxremote.port=9090
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false
-XX:PermSize=32m
-XX:MaxPermSize=256m
-Dapp.home=C:\tomcat.app.home
}}}
  * Enter values for initial and max size of the Java heap in the fields "Initial memory pool" and  "Maximum memory pool", e.g. 128 and 256 (MB)  depending on how much you plan to deploy and how much memory you have available.
  * Click on the "Apply"-button.
 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/Install-Tomcat-2.png

  * Go to the tab names "General" and restart Tomcat using the "Stop" and "Start" buttons.

  * Verify the memory settings with JConsole (comes with Java SE JDK)
   Start JConsole in a command window with the command:
{{{
jconsole localhost:9090
}}}

  * Goto the tab "VM Summary"
  In the end of the field *VM arguments* you should be able to find your settings.
 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/Install-Tomcat-3.png

  * You can also look into the log-files to ensure that everything works as expected.
  See {{{C:\Program Files\Apache Software Foundation\Tomcat 6.0\logs}}} if you installed Tomcat in the default installation folder.
  Typically the catalina.log file contains the most important information, a successful start of Tomcat should typically be logged as:
{{{
INFO: Server startup in 847 ms
}}}


==Installing Apache Derby==
If you want to run manual tests on your PC for services where JDBC is involved it can be useful to run those tests with an external JDBC provider, i.e. not a JDBC provider that is embedded as when you run unit tests.

Install Apache Derby by:
 * Go to http://db.apache.org/derby/derby_downloads.html
  * Select the latest version
  * Download db-derby-`<VERSION>`-bin.zip
 * Unpack the downloaded zip-file, on Windows for example to: C:\program

Start/stop Apache Derby:
 * Open the bin-folder (db-derby-`<VERSION>`-bin/bin)
 * Start by running startNetworkServer.bat (on Windows)
 * Stop by running stopNetworkServer.bat (on Windows)

Connecting to Derby:
 * Connect using an URL like (with your prefered databasename): jdbc:derby://localhost:1527/myDatabaseNameDb;create=true


==Installing Cygwin (Windows only)==
Cygwin is useful for running a local SFTP-server on Windows.

*Note:* Requires Soi-toolkit version 0.4.0 or later for SSH-keys created with Cygwin (due to http://www.mulesource.org/jira/browse/SFTP-38).

[InstallationGuideCygwinSetup Cygwin installation instructions].


==Installing !FileZilla Server (Windows only)==
!FileZilla Server is useful for running a local FTP-server on Windows.

[InstallationGuideFileZillaServerSetup FileZilla Server installation instructions].


=Setup of public key cryptography for the SFTP transport=

When using the SFTP transport it is strongly recommended to not use traditional username/passwords but instead use [http://en.wikipedia.org/wiki/Public-key_cryptography public key cryptography].

The instruction below is based on [http://en.wikipedia.org/wiki/Digital_Signature_Algorithm DSA] keys but [http://en.wikipedia.org/wiki/RSA RSA] keys can be used as well.

*NOTE:* The instructions for creating keys are based on creating the keys on a unix/linux machine and not a Windows PC. Once the keys are created they can be used on a Windows PC. We are working on instructions for using Cygwin in a Windows environment but are stuck on some version issues, see [http://code.google.com/p/soi-toolkit/issues/detail?id=34 issue 34]. 

 * *Verify proper security settings on files and folders*
 Ssh is quite picky on security settings (not unexpected :-) so before trying to create keys verify the following permission settings:
  * home folder: 711
  * folder .ssh: 700
  * file authorized_keys, authorized_keys2: 600
  * private keys (id_dsa,id_rsa): 600
  * public keys (id_dsa.pub,id_rsa.pub): 644
  * Use the chmod command to correct if any of the files or folders are too open, e.g.
{{{
chmod 700 .ssh
}}}

 * *Create a pair of private and public keys*

  Execute the command {{{ssh-keygen -t dsa}}}, accept default filename and enter a proper passphrase of your selection.

  The files {{{id_dsa}}} and {{{id_dsa.pub}}} are now created in your .ssh - folder.

  NOTE: Never give away your private key {{{id_dsa}}}, only share the public one {{{id_dsa.pub}}}!
{{{
MagnusMac-2:~ magnuslarsson$ ssh-keygen -t dsa
Generating public/private dsa key pair.
Enter file in which to save the key (/Users/magnuslarsson/.ssh/id_dsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /Users/magnuslarsson/.ssh/id_dsa.
Your public key has been saved in /Users/magnuslarsson/.ssh/id_dsa.pub.
The key fingerprint is:
31:de:60:62:de:d0:44:b6:90:b6:b9:60:82:aa:d1:da magnuslarsson@MagnusMac-2.local

MagnusMac-2:~ magnuslarsson$ ls /Users/magnuslarsson/.ssh/id_dsa
/Users/magnuslarsson/.ssh/id_dsa

MagnusMac-2:~ magnuslarsson$ ls /Users/magnuslarsson/.ssh/id_dsa.pub
/Users/magnuslarsson/.ssh/id_dsa.pub
}}} 


 * *Copy and activate public key to remote sftp-machines*
 To be able to authenticate yourself using your private key you must copy your public key to the accounts on the remote machines that you want to be able to use.
 Typically you have to copy the public file using the accounts username and password as:
 {{{
MagnusMac-2:~ magnuslarsson$ scp ~/.ssh/id_dsa.pub user@sftpHost:
user@sftpHost's password:
id_dsa.pub                                                        100%  606     0.6KB/s   00:00
 }}}
 Now you have to activate the public key by adding it to a list of known public keys.
 This is typically done by logging in to the remote machine and perform the activation by appending the public key to the file {{{~/.ssh/authorized_keys2}}}
 The commands below also create the {{{.ssh}}} folder, assigns correct permissions if not already existing, the same for the {{{~/.ssh/authorized_keys2}}} - file and finally it deletes the public key that no longer is of use.
 {{{
MagnusMac-2:~ magnuslarsson$ ssh user@sftpHost
user@sftpHost's password:
sftpHost:~ user$ mkdir ~/.ssh
sftpHost:~ user$ chmod 700 ~/.ssh
sftpHost:~ user$ cat id_dsa.pub >> ~/.ssh/authorized_keys2
sftpHost:~ user$ chmod 600 ~/.ssh/authorized_keys2
sftpHost:~ user$ rm id_dsa.pub
sftpHost:~ user$ exit
logout
Connection to localhost closed.
MagnusMac-2:~ magnuslarsson$ 
 }}}


 * *Validate setup*
 It should now be possible to login and start a sftp session to the remote sftp server without specifying any username.
 In the example below we use account {{{muletest1}}} on sftp-server {{{localhost}}}:
 {{{
MagnusMac-2:.ssh magnuslarsson$ ssh muletest1@localhost
Enter passphrase:
Last login: Mon Oct 11 10:55:25 2010 from localhost
MagnusMac-2:~ muletest1$ pwd  
/Users/muletest1
MagnusMac-2:~ muletest1$ exit
logout
Connection to localhost closed.
MagnusMac-2:.ssh magnuslarsson$ 

MagnusMac-2:.ssh magnuslarsson$ sftp muletest1@localhost
Enter passphrase:
Connecting to localhost...
sftp> pwd
Remote working directory: /Users/muletest1
sftp> bye
MagnusMac-2:.ssh magnuslarsson$ 
 }}}


 * *Configure default sftp-settings in soi-toolkit source code generator*
 To simplify setup of sftp-configuration in your development environment the soi-toolkit source code generator allows you to specify your favorite sftp-server, your private key location and your passphrase so you don't have to specify it over and over again while you create new sftp-based services and integrations.
  * Open Eclipse Preference page in the menu and select the "SOI-Toolkit Generator"
  * Specify the root folder of the sftp server you will use most frequently during development
  E.g. {{{muletest1@localhost/~/sftp}}}
  * Specify the name of your private key
  E.g. {{{/Users/magnuslarsson/.ssh/id_dsa}}} 
  * Specify your passphrase for the private key.
  * Click on the "OK" button to conclude the configuration.

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation8.png
#summary Installation Guide for users of soi-toolkit.
#labels Featured

<font size="5" color="red">*NOTE:* This page is partially outdated.<br/>Work is ongoing to update this page!</font>

= Installation Guide =

*Content*
<wiki:toc max_depth="2" />

= Introduction =

To get started with soi-toolkit and Mule ESB you only need to install Java SE and Maven. Mule Studio and the soi-toolkit Eclipse plugin are however strongly recommended as well, see section [#Required_installations Required installations].

Mule Studio is the preferred Java IDE for soi-toolkit and soi-toolkit provides a specific Eclipse plugin with functionality not available for other Java IDE's.

Users of other Java IDE's (e.g. !NetBeans or IntelliJ) should however be fine using soi-toolkit's Maven based source code generators that have the same functionality as the Eclipse plugin. see [UG_UsingGenerators Using the source code generators] for more information.

We also recommend using soapUI as a test tool for Web Services (SOAP and REST based), see section [#Recommended_installations Recommended installations].

Depending on your needs you also might want to install some run time products in your development environment such as Mule ESB, ActiveMQ, or setting up PKI - keys for usage with the SFTP transport. See [InstallationGuideRuntime Installing Run time products] for instructions on how to install and configure run time products.

The installation guides below assumes your on a 32 bit Microsoft Windows PC but are applicable for a Mac OSX or Linux user as well.

The following versions (or newer) are recommended:
|| *Tool* || *Version* ||
||Java SE||6 Update 37||
||Maven||3.0.4||
||Mule Studio||1.3.1||
||Soi-toolkit plugin for Eclipse||0.6.0||
||soapUI||3.6.1||

=Required installations=

==Java SE==
Install Java SE according to the following instructions:

 * Download JDK for Java SE 6 from http://www.oracle.com/technetwork/java/javase/downloads/index.html.
 A file named similar to {{{jdk-6u37-windows-i586.exe}}} is downloaded to your PC.

 * Execute the downloaded installation program and use default values for the installation of both the JDK and the JRE.

 * Create an environment variable, JAVA_HOME, in Windows that points to the installation directory. 
 E.g. {{{JAVA_HOME=C:\Program Files\Java\jdk1.6.0_37}}}

 * Add the bin-folder of the JDK to the Windows PATH-environment variable.
 E.g. {{{PATH=...;%JAVA_HOME%\bin}}}

 * Verify the installation in a command window with the commands {{{java –version}}},  {{{javac –version}}} och {{{set JAVA_HOME}}}. The result should be similar to: 

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/JavaSeVerifyInstallation.png

 * For full installation instructions see [http://www.oracle.com/technetwork/java/javase/documentation/install-windows-152927.html Microsoft Windows Installation (32-bit)]


==Maven==

Install Maven according to the following instructions:

 * Download Maven from http://maven.apache.org/download.html
 Download the file named {{{apache-maven-3.0.4-bin.zip}}} to your computer.

 * Unzip the zip file to the desired installation folder, eg {{{C:\opt}}}.

 * Create an environment variable, {{{M2_HOME}}}, in Windows pointing out the installation.
 For example: {{{M2_HOME=C:\opt\apache-maven-3.0.4}}}

 * Add Maven's bin folder to the Windows {{{PATH}}} variable.
 For example: {{{PATH=...;%M2_HOME%\bin}}}

 * Verifying the installation of a command window with the command {{{mvn -v}}},
 it should produce a result like:

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/MavenVerifyInstallation.png

 * For full installation instructions see http://maven.apache.org/download.html#Installation

===Mule ESB EE dependencies===

If you are using Mule ESB EE you need to manually populate your local maven repository with the Mule ESB EE dependencies.

 * Download and unzip Mule ESB EE from MuleSoft Customer Portal
 * Define the environment varible MULE_HOME to point to the folde you unzipped Mule ESB EE to
 * Go to the bin folder and run the script {{{populate_m2_repo}}} ({{{populate_m2_repo.cmd}}} for Windows) with the location of your local maven repository as input, e.g.:

{{{
export MULE_HOME=/usr/local/mule-enterprise-standalone-3.3.1
cd $MULE_HOME/bin
./populate_m2_repo ~/.m2/repository
}}}

==Mule Studio==

Mule Studio is available in two flavors in the the same way as Mule ESB, Community Edition (CE) and Enterprise Edition (EE).
This instruction is for Mule Studio CE but Mule Studio EE can be downloaded from !MuleSoft Customer Portal and used according to the instructions below.

Install Mule Studio CE according to the following instructions:

 * Download {{{Download Mule ESB 3.3 Community Edition (with Mule Studio)}}} from http://www.mulesoft.org/download-mule-esb-community-edition.
 A file named similar to {{{MuleStudio-CE-for-win-32bit-1.3.1-201209061215.zip}}} is downloaded to your computer.

 * Unzip the zip file to the desired installation folder, eg C:\opt.

 * Create a shortcut to the file {{{MuleStudio.exe}}} (eg {{{C:\opt\mule-studio-ce-1.3.1\MuleStudio.exe}}}) in the installation folder to the desktop.

 * Verify the installation, start Mule Studio through the desktop shortcut.
 Enter the desired workspace folder where requested and click on the "Workbench" icon (top right) when the welcome screen is presented. The the Mule Studio workbench should be displayed and look like:

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/MuleStudioVerifyInstallation.png

 * Ensure that you have the classpath variable M2_REPO setup in Mule Studio
  * Goto Mule Studio Preferences and select "Java --> Buid Path --> Classpath Variables"
  * If the variable M2_REPO is not already defined then click on the "New..." button
  * Enter M2_REPO as the name and click on the "Folder..." button and navigate and select you local Maven repository folder.
  * Click on "Ok" buttons and accept a full rebuild of your workspace if requested.

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/MuleStudio_M2_REPO_variable.png

==Eclipse==

Install Eclipse according to the following instructions:

 * Download  {{{Eclipse IDE for Java EE Developers}}} from http://eclipse.org/downloads/.
 A file named {{{eclipse-jee-helios-SR1-win32.zip}}} is downloaded to your computer.

 * Unzip the zip file to the desired installation folder, eg C:\opt.

 * Create a shortcut to the file {{{eclipse.exe}}} (eg {{{C:\opt\eclipse\eclipse.exe}}}) in the installation folder to the desktop.

 * Verify the installation, start Eclipse through the desktop shortcut.
 Enter the desired workspace folder where requested and click on the "Workbench" icon (top right) when the welcome screen is presented. The the Eclipse workbench should be displayed and look like:

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/EclipseVerifyInstallation.png

 * Ensure that you have the classpath variable M2_REPO setup in Eclipse
  * Goto Eclipse Preferences and select "Java --> Buid Path --> Classpath Variables"
  * If the variable M2_REPO is not already defined then click on the "New..." button
  * Enter M2_REPO as the name and click on the "Folder..." button and navigate and select you local Maven repository folder.
  * Click on "Ok" buttons and accept a full rebuild of your workspace if requested.

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/Eclipse_M2_REPO_variable.png

==Soi-toolkit Eclipse plugin==

If you want to be able to start the soi-toolkit source code generators from within Eclipse you should install this Eclipse plugin.

*NOTE #1*: an alternative is to use Maven to start the source code generators, see [UG_UsingGenerators Using the source code generators].

*NOTE #2*: Since soi-toolkit v0.5.0 the eclipse plugins (also for older versions of soi-toolkit) are distributed as a downloadable zip'ed update site that needs to be downloaded and unzipped to the local file system. The reason for this change is improved stability and performance during the installation and update process.

  * Download the zip'ed update site from: http://soi-toolkit.googlecode.com/svn/eclipse-update-site/zip/ 
  * Unzip it to a local folder, we will name this folder as {local-update-site} in the instructions below.

 * Select in the Eclipse menu "Help --> Install New Software..."

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation1.png

 * Click on the "Add..." button to add the soi-toolkit update site
  * Enter "soi-toolkit update site" in the name-field
  * Click on the "Local..." button and point out the local folder {local-update-site}
  * Click on the "Ok" button

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation2.png

 * Allow Eclipse to process the update site

 * Expand the available selection "soi-toolkit generator" and select the "soi-toolkit generator feature"

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation3.png

 * Click on the "Next >" button
 * Click on the "Next >" button again

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation4.png

 * Accept the terms of the license agreement and press the "Finish" button
  * The plugin is now downloaded and installed.

 * Click on the "Ok" button when asked to accept unsigned content

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation5.png

 * Click on the "Restart Now" button when asked to restart Eclipse

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation6.png

 * Configure the plugin by open Eclipse Preference page in the menu and select the "SOI-Toolkit Generator"
  * Specify the folder where you have Maven installed in the field "*_Maven home folder_*"
  * Specify the default folder where the generator should create files in the field "*_Default root folder_*"
  * You can leave the rest of the fields as they are.
  * Click on the "*_OK_*" button to conclude the configuration.

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation7.png

*NOTE:* Regarding the problem with disabled Apply and Ok buttons.
If, for example, a non existing file or folder is specified in the fields "Maven home folder" or "Default root folder" then the Ok and Apply buttons are disabled. Please verify the correctness of the content in all fields if the Ok and Apply buttons gets disabled.


=Recommended installations=

==soapUI==
If you want to test a soap-webservice without having to write code for a test, then soapUI is a good tool:
 * Download the latest version from http://sourceforge.net/projects/soapui/files/soapui/
 * For Windows: select soapUI-x32-`<VERSION>`.exe
 * Run the installer.


=Updates=

==Updating the Soi-toolkit Eclipse plugin==

*NOTE*: Since soi-toolkit v0.5.0 the eclipse plugins (also for older versions of soi-toolkit) are distributed as a downloadable zip'ed update site that needs to be downloaded and unzipped to the local file system. The reason for this change is improved stability and performance during the installation and update process.

To update the Soi-toolkit Eclipse plugin do the following:

 * First write down the preference-setting you have for the existing version of the Soi-toolkit Eclipse plugin, you will have to reenter them after the upgrade
  * Open the Eclipse Preference page in the menu and select the "SOI-Toolkit Generator"

 * Download the zip'ed update site from: http://soi-toolkit.googlecode.com/svn/eclipse-update-site/zip/ 
 * Unzip it to a local folder, we will name this folder as {local-update-site} in the instructions below.
 * Select in the Eclipse menu "Help --> Install New Software..."

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation1.png

 * Click on the link "Available Software Sites"
 * Select "soi-toolkit update site" and click on Edit-button.
 * Update the Location-field to point out the new {local-update-site} folder.

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitUpdate2.png

 * Click on the Ok-button twice to close the two dialogs
 * Back in the "Install" - Dialog select the soi-toolkit update site
 * The soi-toolkit generator should be displayed, expand it and select the new version. 

 http://soi-toolkit.googlecode.com/svn/wiki/InstallationGuide/SoiToolkitInstallation3.png

 * Now follow the instruction from the initial installation of the plugin above.

 * After the update is done open the Eclipse Preference page in the menu and select the "SOI-Toolkit Generator" and reenter your preference-settings that you wrote down in the first step above


=Installing Run time products=
[InstallationGuideRuntime See the following installation instructions].


=Downloading Maven dependencies=
_*Since: 0.5.0*_
<br>There is a maven-script that downloads all necessary dependencies for a version of Soi-toolkit:
  # Download the script for the version of Soi-toolkit you will use from:
    http://search.maven.org/#search|ga|1|soitoolkit-populate-local-maven-repo
    <br>Note: groupId: org.soitoolkit.tools, artifactId: soitoolkit-populate-local-maven-repo
    <br>
    <br>Save the script as *pom.xml*
    <br>
  # Put the script in an empty tmp-dir, for example C:\temp\poprepo, and run the script:
    {{{
    cd poprepo
    mvn install
    }}}
    to download dependencies with the default Mule-version for the used Soi-toolkit version.
    <br>To specify a Mule-version use the "muleVersion" argument like:
    {{{
    mvn install -DmuleVersion=3.2.1
    }}}
    
*Note:* if dependencies can not be resolved/downloaded, it may be because your organization is using a Maven repository manager that does not mirror all required repositories.
  * Verify if that is the case by temporary renaming your $USER_HOME/.m2/settings.xml to $USER_HOME/.m2/settings.xml.nop and re-run the script.
  * The Maven mirror configuration may alternatively have been entered in: $MAVEN_HOME/conf/settings.xml in which case you need comment out the mirror-settings and test by re-running the script.
  * If your Maven repository manager does not mirror necessary repositories, you need to configure the repository manager.